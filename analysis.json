{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "## `ajax-wrapper`\n\nThis component handles a given url by asynchronously fetching data from it and passing the data to its inner children.",
      "summary": "",
      "path": "src/data-control/ajax-wrapper.html",
      "properties": [
        {
          "name": "dataUrl",
          "type": "string | null | undefined",
          "description": "URL of data to be fetched",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 20
            },
            "end": {
              "line": 50,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "dataSchema",
          "type": "string | null | undefined",
          "description": "The data schema of the requested data. So far, only `jsonapi` is supported.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "refreshInterval",
          "type": "number | null | undefined",
          "description": "If set, data is refreshed constantly after the specified interval (ms).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 54,
              "column": 43
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "initialDelay",
          "type": "number | null | undefined",
          "description": "If set, the initial request is delayed (ms).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 20
            },
            "end": {
              "line": 56,
              "column": 40
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "lazyLoad",
          "type": "boolean | null | undefined",
          "description": "If set, the initial request is delayed until the element is scrolled into the viewport.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 20
            },
            "end": {
              "line": 58,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "errorText",
          "type": "string | null | undefined",
          "description": "The text that should be shown in case of an erroneous response",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 20
            },
            "end": {
              "line": 63,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_responseData",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 20
            },
            "end": {
              "line": 64,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_responseError",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 20
            },
            "end": {
              "line": 68,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_showErrorText",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 20
            },
            "end": {
              "line": 72,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_intersectionObserver",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 20
            },
            "end": {
              "line": 76,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "This is called by Polymer after the component instance is attached to the document.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 12
            },
            "end": {
              "line": 101,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "This is called by Polymer after the element is detached from the document.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 12
            },
            "end": {
              "line": 115,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_request",
          "description": "Executes the request.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 12
            },
            "end": {
              "line": 129,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleResponse",
          "description": "Handle the ajax response and pass data down to contained elements.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 12
            },
            "end": {
              "line": 147,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "response",
              "type": "Object",
              "description": "The receeived response."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handlePagination",
          "description": "Request and append additional resources, if endpoint is paginated.\nIf all resources were retrieved, they are returned.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 12
            },
            "end": {
              "line": 172,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "body",
              "type": "Object",
              "description": "The body of the response."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The entire resources or 'undefined', if additional request is in progress."
          }
        },
        {
          "name": "_parseData",
          "description": "Parse data depending on the specified data schema.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 12
            },
            "end": {
              "line": 187,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The raw data that should be parsed"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The parsed data."
          }
        },
        {
          "name": "_handleError",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 12
            },
            "end": {
              "line": 196,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_scheduleRefresh",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 12
            },
            "end": {
              "line": 203,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeShowErrorText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 12
            },
            "end": {
              "line": 207,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "errorText"
            },
            {
              "name": "responseError"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/data_control/ajax_wrapper_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 42,
          "column": 8
        },
        "end": {
          "line": 208,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "AjaxWrapper",
      "attributes": [
        {
          "name": "data-url",
          "description": "URL of data to be fetched",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 20
            },
            "end": {
              "line": 50,
              "column": 35
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "data-schema",
          "description": "The data schema of the requested data. So far, only `jsonapi` is supported.",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 38
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "refresh-interval",
          "description": "If set, data is refreshed constantly after the specified interval (ms).",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 54,
              "column": 43
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "initial-delay",
          "description": "If set, the initial request is delayed (ms).",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 20
            },
            "end": {
              "line": 56,
              "column": 40
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "lazy-load",
          "description": "If set, the initial request is delayed until the element is scrolled into the viewport.",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 20
            },
            "end": {
              "line": 58,
              "column": 37
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "error-text",
          "description": "The text that should be shown in case of an erroneous response",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 20
            },
            "end": {
              "line": 63,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "ajax-wrapper"
    },
    {
      "description": "## `data-filter`\n\nThis is a component for filtering data based on user input.",
      "summary": "",
      "path": "src/data-control/data-filter.html",
      "properties": [
        {
          "name": "exclusive",
          "type": "boolean | null | undefined",
          "description": "Determines whether multiple series or only a single one can be selected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "activeSeries",
          "type": "Array | null | undefined",
          "description": "List of names of active series that are visualized",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 58,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "transformData",
          "description": "Transforms the data by applying the filter",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 12
            },
            "end": {
              "line": 80,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The source data."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The transformed data."
          }
        },
        {
          "name": "_isActive",
          "description": "Checks, whether the filter for a specific series is active or not.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 12
            },
            "end": {
              "line": 91,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "series"
            }
          ]
        },
        {
          "name": "_handleTap",
          "description": "Event handler for tap events on filter buttons.\nWill enable or disable appropriate filter.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 12
            },
            "end": {
              "line": 115,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/data_control/data_filter_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 8
        },
        "end": {
          "line": 116,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "DataFilter",
      "attributes": [
        {
          "name": "exclusive",
          "description": "Determines whether multiple series or only a single one can be selected.",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "active-series",
          "description": "List of names of active series that are visualized",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 58,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 27,
              "column": 42
            }
          }
        }
      ],
      "tagname": "data-filter"
    },
    {
      "description": "## `data-selector`\n\nThis component performs a data projection on the passed data and passes the result to its inner children.",
      "summary": "",
      "path": "src/data-control/data-selector.html",
      "properties": [
        {
          "name": "key",
          "type": "string | null | undefined",
          "description": "Key/index of the data object that should be passed on",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 20
            },
            "end": {
              "line": 31,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "keys",
          "type": "Array | null | undefined",
          "description": "Sequence of keys/indices of the data object that should be passed on",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 20
            },
            "end": {
              "line": 35,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "transformData",
          "description": "Transforms the data by performing the projection.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 12
            },
            "end": {
              "line": 55,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The source data."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The transformed data."
          }
        },
        {
          "name": "_selectData",
          "description": "Perform projection defined by key sequence on given data object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 12
            },
            "end": {
              "line": 72,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "keys"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/data_control/data_selector_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 8
        },
        "end": {
          "line": 73,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "DataSelector",
      "attributes": [
        {
          "name": "key",
          "description": "Key/index of the data object that should be passed on",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 20
            },
            "end": {
              "line": 31,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "keys",
          "description": "Sequence of keys/indices of the data object that should be passed on",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 20
            },
            "end": {
              "line": 35,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 6,
              "column": 42
            }
          }
        }
      ],
      "tagname": "data-selector"
    },
    {
      "description": "## `schema-transformer`\n\nThis component performs a schema transformation on the passed data and passes the result to its inner children.\n\nThe transformation is defined by a list of mappings each creating a single key-value pair in the resulting object. Mappings need to match the following schema:\n\n```xml\n {\n     \"<keyInResult>\": {\n         \"type\": \"<transformationType>\",\n         \"<additionalParameter1>\": \"<value>\",\n         \"<additionalParameter2>\": \"<value>\"\n     },\n     ...\n }\n```\n\nThe following transformation types are supported:\n- **constant**: The value of the key is set to a constant string specified in additional parameter `value`.\n- **collect**: The value of the key is collected from a certain key of the source object(s). Key of the entry must be specified in additional parameter `sourceKey`.\n- **keys**: The value of the key is set to an (flattened) array of the keys of the source object(s).\n- **values**: The value of the key is set to an (flattened) array of the values of the source object(s).\n\nFor more concrete mapping examples visit the demo page.",
      "summary": "",
      "path": "src/data-control/schema-transformer.html",
      "properties": [
        {
          "name": "mappings",
          "type": "Array | null | undefined",
          "description": "The array of mappings that should be performed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 20
            },
            "end": {
              "line": 49,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "noMerge",
          "type": "boolean | null | undefined",
          "description": "Per default, the mappings are executed for each source object and results get merged into a single object. This mixin can be disabled using this parameter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 20
            },
            "end": {
              "line": 51,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "transformData",
          "description": "Transforms the data into a plotly readable object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 12
            },
            "end": {
              "line": 79,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The source data."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The transformed data."
          }
        },
        {
          "name": "_applyMappings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 12
            },
            "end": {
              "line": 92,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_applyTransformation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 12
            },
            "end": {
              "line": 105,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            },
            {
              "name": "data"
            },
            {
              "name": "mapping"
            }
          ]
        },
        {
          "name": "_applyConstantMapping",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 12
            },
            "end": {
              "line": 109,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mapping"
            }
          ]
        },
        {
          "name": "_applyCollectMapping",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 12
            },
            "end": {
              "line": 127,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mapping"
            },
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_applyKeysMapping",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 12
            },
            "end": {
              "line": 137,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mapping"
            },
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_applyValuesMapping",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 12
            },
            "end": {
              "line": 149,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mapping"
            },
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_flatten",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 12
            },
            "end": {
              "line": 153,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arrays"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/data_control/schema_transformer_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 8
        },
        "end": {
          "line": 154,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "SchemaTransformer",
      "attributes": [
        {
          "name": "mappings",
          "description": "The array of mappings that should be performed.",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 20
            },
            "end": {
              "line": 49,
              "column": 35
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "no-merge",
          "description": "Per default, the mappings are executed for each source object and results get merged into a single object. This mixin can be disabled using this parameter.",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 20
            },
            "end": {
              "line": 51,
              "column": 36
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 6,
              "column": 42
            }
          }
        }
      ],
      "tagname": "schema-transformer"
    },
    {
      "description": "## `barchart-basic`\n\nThis is a basic component for plotly barcharts.\n\nFor further information and deeper understanding visit the [Plotly bar chart documentation](https://plot.ly/javascript/bar-charts/).",
      "summary": "",
      "path": "src/visualizations/barchart-basic.html",
      "properties": [
        {
          "name": "primarycolor",
          "type": "string | null | undefined",
          "description": "Primary color of chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(0,0,0,1)\""
        },
        {
          "name": "accentcolor",
          "type": "string | null | undefined",
          "description": "Accent color of chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(0,0,0,1)\""
        },
        {
          "name": "bgcolor",
          "type": "string | null | undefined",
          "description": "Background color of chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(255,255,255,1)\""
        },
        {
          "name": "xGridcolor",
          "type": "string | null | undefined",
          "description": "Grid color of x axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 58,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(238,238,238,1)\""
        },
        {
          "name": "yGridcolor",
          "type": "string | null | undefined",
          "description": "Grid color of y axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 20
            },
            "end": {
              "line": 64,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(238,238,238,1)\""
        },
        {
          "name": "scrollzoom",
          "type": "boolean | null | undefined",
          "description": "Scroll and zoom activation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 20
            },
            "end": {
              "line": 70,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "scrollrange",
          "type": "number | null | undefined",
          "description": "Scroll range provided in % 0 to 100",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 20
            },
            "end": {
              "line": 76,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "100"
        },
        {
          "name": "stackedbar",
          "type": "boolean | null | undefined",
          "description": "Enables stacked bar if multiple xy objects are provided",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 20
            },
            "end": {
              "line": 82,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "xTitle",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 20
            },
            "end": {
              "line": 83,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "yTitle",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 20
            },
            "end": {
              "line": 84,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "getDiagram",
          "description": "Gets the container element of the diagram that should be rendered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 12
            },
            "end": {
              "line": 95,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getPlotData",
          "description": "Gets the data of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 12
            },
            "end": {
              "line": 110,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "getLayout",
          "description": "Gets the layout options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 12
            },
            "end": {
              "line": 149,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getConfig",
          "description": "Gets the config options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 12
            },
            "end": {
              "line": 158,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/barchart_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 8
        },
        "end": {
          "line": 159,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "BarchartBasic",
      "attributes": [
        {
          "name": "primarycolor",
          "description": "Primary color of chart",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "accentcolor",
          "description": "Accent color of chart",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "bgcolor",
          "description": "Background color of chart",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "x-gridcolor",
          "description": "Grid color of x axis",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 58,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "y-gridcolor",
          "description": "Grid color of y axis",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 20
            },
            "end": {
              "line": 64,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "scrollzoom",
          "description": "Scroll and zoom activation",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 20
            },
            "end": {
              "line": 70,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "scrollrange",
          "description": "Scroll range provided in % 0 to 100",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 20
            },
            "end": {
              "line": 76,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "stackedbar",
          "description": "Enables stacked bar if multiple xy objects are provided",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 20
            },
            "end": {
              "line": 82,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "x-title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 20
            },
            "end": {
              "line": 83,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "y-title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 20
            },
            "end": {
              "line": 84,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "barchart-basic"
    },
    {
      "description": "## `piechart-basic`\n\nThis is a basic component for plotly piecharts.\n\nFor further information and deeper understanding visit the [Plotly pie chart documentation](https://plot.ly/javascript/pie-charts/).",
      "summary": "",
      "path": "src/visualizations/piechart-basic.html",
      "properties": [
        {
          "name": "colors",
          "type": "Array | null | undefined",
          "description": "Colors for the dataset (must be same size as dataset)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 36,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "hideLegend",
          "type": "boolean | null | undefined",
          "description": "Determines whether the legend should be hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 20
            },
            "end": {
              "line": 38,
              "column": 39
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "getDiagram",
          "description": "Gets the container element of the diagram that should be rendered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 12
            },
            "end": {
              "line": 49,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getPlotData",
          "description": "Gets the data of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 12
            },
            "end": {
              "line": 66,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "getLayout",
          "description": "Gets the layout options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 12
            },
            "end": {
              "line": 73,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/piechart_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 8
        },
        "end": {
          "line": 74,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "PiechartBasic",
      "attributes": [
        {
          "name": "colors",
          "description": "Colors for the dataset (must be same size as dataset)",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 36,
              "column": 33
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "hide-legend",
          "description": "Determines whether the legend should be hidden",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 20
            },
            "end": {
              "line": 38,
              "column": 39
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "piechart-basic"
    },
    {
      "description": "## `linechart-basic`\n\nThis is a basic component for plotly linecharts.\n\nFor further information and deeper understanding visit the [Plotly line chart documentation](https://plot.ly/javascript/line-charts/).",
      "summary": "",
      "path": "src/visualizations/linechart-basic.html",
      "properties": [
        {
          "name": "accentcolor",
          "type": "string | null | undefined",
          "description": "Accent color of chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(0,0,0,1)\""
        },
        {
          "name": "scrollzoom",
          "type": "boolean | null | undefined",
          "description": "Scroll and zoom activation",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "scrollrange",
          "type": "number | null | undefined",
          "description": "Scroll range provided in % 0 to 100",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "100"
        },
        {
          "name": "mode",
          "type": "string | null | undefined",
          "description": "Mode of the line chart. Must be either `markers`, `lines` or `lines+markers`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 57,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"lines\""
        },
        {
          "name": "highlightLatest",
          "type": "boolean | null | undefined",
          "description": "Determines whether to show the latest value at the end of the graph",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 20
            },
            "end": {
              "line": 62,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "vLines",
          "type": "Array | null | undefined",
          "description": "Draw vertical dotted lines at specified x-axis points",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 20
            },
            "end": {
              "line": 67,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "getDiagram",
          "description": "Gets the container element of the diagram that should be rendered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 12
            },
            "end": {
              "line": 78,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getPlotData",
          "description": "Gets the data of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 12
            },
            "end": {
              "line": 96,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "getLayout",
          "description": "Gets the layout options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 12
            },
            "end": {
              "line": 145,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getConfig",
          "description": "Gets the config options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 12
            },
            "end": {
              "line": 154,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/linechart_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 8
        },
        "end": {
          "line": 155,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "LinechartBasic",
      "attributes": [
        {
          "name": "accentcolor",
          "description": "Accent color of chart",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "scrollzoom",
          "description": "Scroll and zoom activation",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "scrollrange",
          "description": "Scroll range provided in % 0 to 100",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "mode",
          "description": "Mode of the line chart. Must be either `markers`, `lines` or `lines+markers`.",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 57,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "highlight-latest",
          "description": "Determines whether to show the latest value at the end of the graph",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 20
            },
            "end": {
              "line": 62,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "v-lines",
          "description": "Draw vertical dotted lines at specified x-axis points",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 20
            },
            "end": {
              "line": 67,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "linechart-basic"
    },
    {
      "description": "## `circular-progress`\n\nThis is a basic component for circular progress charts\n\n**Data format:** integer value (percentage) or array of two integer values (percentage) to show secondary data",
      "summary": "",
      "path": "src/visualizations/circular-progress.html",
      "properties": [
        {
          "name": "width",
          "type": "number | null | undefined",
          "description": "Width of the outer div",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 20
            },
            "end": {
              "line": 37,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "200"
        },
        {
          "name": "height",
          "type": "number | null | undefined",
          "description": "Height of the outer div",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 20
            },
            "end": {
              "line": 42,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "200"
        },
        {
          "name": "primarycolor",
          "type": "string | null | undefined",
          "description": "Fill color",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 20
            },
            "end": {
              "line": 47,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"#f2503f\""
        },
        {
          "name": "primarytextcolor",
          "type": "string | null | undefined",
          "description": "Text color",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"#000000\""
        },
        {
          "name": "secondarycolor",
          "type": "string | null | undefined",
          "description": "Fill color of optional secondary value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 57,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"#ffa64c\""
        },
        {
          "name": "secondarytextcolor",
          "type": "string | null | undefined",
          "description": "Text color of optional secondary value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 20
            },
            "end": {
              "line": 62,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"#ffa64c\""
        },
        {
          "name": "accentcolor",
          "type": "string | null | undefined",
          "description": "Background color of the circle",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 20
            },
            "end": {
              "line": 67,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"#404F70\""
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 12
            },
            "end": {
              "line": 88,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "dataChanged",
          "description": "Creates the diagram",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 12
            },
            "end": {
              "line": 218,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/circular_progress_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 25,
          "column": 8
        },
        "end": {
          "line": 219,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "CircularProgress",
      "attributes": [
        {
          "name": "width",
          "description": "Width of the outer div",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 20
            },
            "end": {
              "line": 37,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "height",
          "description": "Height of the outer div",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 20
            },
            "end": {
              "line": 42,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "primarycolor",
          "description": "Fill color",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 20
            },
            "end": {
              "line": 47,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "primarytextcolor",
          "description": "Text color",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "secondarycolor",
          "description": "Fill color of optional secondary value",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 57,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "secondarytextcolor",
          "description": "Text color of optional secondary value",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 20
            },
            "end": {
              "line": 62,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "accentcolor",
          "description": "Background color of the circle",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 20
            },
            "end": {
              "line": 67,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "circular-progress"
    },
    {
      "description": "## `circular-stacked`\n\nThis is a basic component for stacked circular charts\n\n**Data format:** array of integer values (percentage)",
      "summary": "",
      "path": "src/visualizations/circular-stacked.html",
      "properties": [
        {
          "name": "width",
          "type": "number | null | undefined",
          "description": "Width of the outer div",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 20
            },
            "end": {
              "line": 36,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "200"
        },
        {
          "name": "height",
          "type": "number | null | undefined",
          "description": "Height of the outer div",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 20
            },
            "end": {
              "line": 41,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "200"
        },
        {
          "name": "primarycolor",
          "type": "string | null | undefined",
          "description": "Fill and text color",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"#f2503f\""
        }
      ],
      "methods": [
        {
          "name": "dataChanged",
          "description": "Creates the diagram",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 12
            },
            "end": {
              "line": 109,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/circular_stacked_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 24,
          "column": 8
        },
        "end": {
          "line": 110,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "CircularStacked",
      "attributes": [
        {
          "name": "width",
          "description": "Width of the outer div",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 20
            },
            "end": {
              "line": 36,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "height",
          "description": "Height of the outer div",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 20
            },
            "end": {
              "line": 41,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "primarycolor",
          "description": "Fill and text color",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "circular-stacked"
    },
    {
      "description": "## `bubblechart-basic`\n\nThis is a basic component for plotly bubblecharts.\n\nFor further information and deeper understanding visit the [Plotly bubble chart documentation](https://plot.ly/javascript/bubble-charts/).",
      "summary": "",
      "path": "src/visualizations/bubblechart-basic.html",
      "properties": [
        {
          "name": "primarycolor",
          "type": "string | null | undefined",
          "description": "Primary color of chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(0,0,0,1)\""
        },
        {
          "name": "accentcolor",
          "type": "string | null | undefined",
          "description": "Accent color of chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(0,0,0,1)\""
        }
      ],
      "methods": [
        {
          "name": "getDiagram",
          "description": "Gets the container element of the diagram that should be rendered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 12
            },
            "end": {
              "line": 57,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getPlotData",
          "description": "Gets the data of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 12
            },
            "end": {
              "line": 65,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "getLayout",
          "description": "Gets the layout options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 12
            },
            "end": {
              "line": 84,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/bubblechart_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 8
        },
        "end": {
          "line": 85,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "BubblechartBasic",
      "attributes": [
        {
          "name": "primarycolor",
          "description": "Primary color of chart",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "accentcolor",
          "description": "Accent color of chart",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "bubblechart-basic"
    },
    {
      "description": "## `activitychart-basic`\n\nThis component shows an activity history, similar to the colored github chart.\n\n**Data format:** X (timestamp) and Y (measure) values to be plotted (in JSON format)",
      "summary": "",
      "path": "src/visualizations/activitychart-basic.html",
      "properties": [
        {
          "name": "primarycolor",
          "type": "string | null | undefined",
          "description": "Primary color of chart; formats supported are Hex, Short Hex, RGB (absolute), RGB (percentual), RGBA (absolute), RGBA (percentual), keyword (e.g. 'white'), HSL and HSLA",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 20
            },
            "end": {
              "line": 62,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"#930517\""
        },
        {
          "name": "accentcolor",
          "type": "string | null | undefined",
          "description": "Accent color of chart; formats supported are Hex, Short Hex, RGB (absolute), RGB (percentual), RGBA (absolute), RGBA (percentual), keyword (e.g. 'white'), HSL and HSLA",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 20
            },
            "end": {
              "line": 68,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"#F5E8BB\""
        },
        {
          "name": "cellWidth",
          "type": "number | null | undefined",
          "description": "Width of cell",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 20
            },
            "end": {
              "line": 74,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "15"
        },
        {
          "name": "cellHeight",
          "type": "number | null | undefined",
          "description": "Height of cell",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 20
            },
            "end": {
              "line": 80,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "15"
        },
        {
          "name": "cellSpacing",
          "type": "number | null | undefined",
          "description": "Space between cells (in px)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 20
            },
            "end": {
              "line": 86,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "5"
        },
        {
          "name": "labelPadding",
          "type": "number | null | undefined",
          "description": "Set padding (in px) of the label shown when hovering over a datum",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 20
            },
            "end": {
              "line": 92,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "3"
        },
        {
          "name": "labelTextSize",
          "type": "number | null | undefined",
          "description": "Set text size (in px) of label shown when hovering over a datum",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 20
            },
            "end": {
              "line": 98,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "14"
        },
        {
          "name": "rotateXLabels",
          "type": "boolean | null | undefined",
          "description": "Determine whether labels of X axis should be rotated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 20
            },
            "end": {
              "line": 104,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "labelBackgroundColor",
          "type": "string | null | undefined",
          "description": "Customize the label background color",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 20
            },
            "end": {
              "line": 110,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"white\""
        },
        {
          "name": "xTitle",
          "type": "string | null | undefined",
          "description": "Title of the x axes",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 20
            },
            "end": {
              "line": 116,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"x\""
        },
        {
          "name": "yTitle",
          "type": "string | null | undefined",
          "description": "Title of the y axes",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 20
            },
            "end": {
              "line": 122,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"y\""
        },
        {
          "name": "axisTitleTextSize",
          "type": "number | null | undefined",
          "description": "Set text size (in px) of the axes' title labels",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 20
            },
            "end": {
              "line": 128,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "14"
        },
        {
          "name": "axisLabelsTextSize",
          "type": "number | null | undefined",
          "description": "Set text size (in px) of the axes' labels",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 20
            },
            "end": {
              "line": 134,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "12"
        },
        {
          "name": "xLabelFrequency",
          "type": "number | null | undefined",
          "description": "Decide with what column-frequency the lables on the x axis should be shown",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 20
            },
            "end": {
              "line": 140,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "yLabelFrequency",
          "type": "number | null | undefined",
          "description": "Decide with what column-frequency the lables on the y axis should be shown",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 20
            },
            "end": {
              "line": 146,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "hideYAxis",
          "type": "boolean | null | undefined",
          "description": "flag to disable y-Axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 20
            },
            "end": {
              "line": 152,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "xLabelFormatter",
          "type": "Object | null | undefined",
          "description": "Custom formatter function for x axes labels",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 20
            },
            "end": {
              "line": 157,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "yLabelFormatter",
          "type": "Object | null | undefined",
          "description": "Custom formatter function for y axes labels",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 20
            },
            "end": {
              "line": 162,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "cellLabelFormatter",
          "type": "Object | null | undefined",
          "description": "Custom formatter function for cell label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 20
            },
            "end": {
              "line": 167,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "sortXValues",
          "type": "string | null | undefined",
          "description": "Determines whether x values should be sorted before plotting (can be `asc` or `desc` depending on the sorting direction)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 20
            },
            "end": {
              "line": 172,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "sortYValues",
          "type": "string | null | undefined",
          "description": "Determines whether y values should be sorted before plotting (can be `asc` or `desc` depending on the sorting direction)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 20
            },
            "end": {
              "line": 177,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_xValues",
          "type": "Array | null | undefined",
          "description": "Is updated automatically when data is changed and cannot be overwritten.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 20
            },
            "end": {
              "line": 179,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_yValues",
          "type": "Array | null | undefined",
          "description": "Is updated automatically when data is changed and cannot be overwritten.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 20
            },
            "end": {
              "line": 181,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_yAxisOffset",
          "type": "number | null | undefined",
          "description": "This property is computed automatically based on cell-spacing and axis title text size and cannot be overwritten.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 20
            },
            "end": {
              "line": 186,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_cellOuterWidth",
          "type": "number | null | undefined",
          "description": "This property is computed automatically based on cell-size and cell-spacing and cannot be overwritten.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 20
            },
            "end": {
              "line": 191,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_cellOuterHeight",
          "type": "number | null | undefined",
          "description": "This property is computed automatically based on cell-size and cell-spacing and cannot be overwritten.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 20
            },
            "end": {
              "line": 196,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_cellsPerColumn",
          "type": "number | null | undefined",
          "description": "Number of colored dots per column. Is always derived from the size of axisLabels.y.values provided and cannot be overwritten!",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 20
            },
            "end": {
              "line": 201,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_computeYAxesOffset",
          "description": "Computes the vertical offset of the y axes.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 12
            },
            "end": {
              "line": 212,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cellSpacing"
            },
            {
              "name": "axisTitleTextSize"
            }
          ]
        },
        {
          "name": "_computeCellOuterSize",
          "description": "Computes the outer size(width or height) of a cell.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 12
            },
            "end": {
              "line": 217,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cellSpacing"
            },
            {
              "name": "cellSize"
            }
          ]
        },
        {
          "name": "_computeCellsPerColumn",
          "description": "Deduces the number of cells to be shown per column from the number of y labels provided.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 12
            },
            "end": {
              "line": 222,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yValues"
            }
          ]
        },
        {
          "name": "dataChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 12
            },
            "end": {
              "line": 241,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_extractValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 12
            },
            "end": {
              "line": 263,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "axis"
            }
          ]
        },
        {
          "name": "_plotYAxis",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 265,
              "column": 12
            },
            "end": {
              "line": 303,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "diagram"
            },
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_plotXAxis",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 12
            },
            "end": {
              "line": 338,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "diagram"
            },
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_plotCells",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 12
            },
            "end": {
              "line": 386,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "diagram"
            },
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showLabel",
          "description": "Appends a label showing the detailed activity count and date of the activity cell that the mouse hovers over.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 12
            },
            "end": {
              "line": 412,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "diagram"
            },
            {
              "name": "dataPoint"
            },
            {
              "name": "index"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hideLabel",
          "description": "Deletes the label once the mouse doesn't hover over the corresponding cell anymore",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 415,
              "column": 12
            },
            "end": {
              "line": 417,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "diagram"
            },
            {
              "name": "dataPoint"
            },
            {
              "name": "index"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_distinct",
          "description": "Removes duplicate items from array",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 420,
              "column": 12
            },
            "end": {
              "line": 424,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "array"
            }
          ]
        },
        {
          "name": "_getCellLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 12
            },
            "end": {
              "line": 434,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataPoint"
            }
          ]
        },
        {
          "name": "_getAxisLabel",
          "description": "Returns axes label for a corresponding value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 437,
              "column": 12
            },
            "end": {
              "line": 439,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "formatter"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_getBounds",
          "description": "Returns the bounding box of a group element, useful for accessing a group's width and height",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 442,
              "column": 12
            },
            "end": {
              "line": 444,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "diagram"
            },
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "_getLabelPosX",
          "description": "Returns the x position of a label considering the corresponding cell's position, the label's width as well as the bounds of the SVG",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 447,
              "column": 12
            },
            "end": {
              "line": 452,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "diagram"
            },
            {
              "name": "dataPoint"
            },
            {
              "name": "labelTextWidth"
            }
          ]
        },
        {
          "name": "_getLabelPosY",
          "description": "Returns the y position of a label considering the corresponding cell's position, the label's height as well as the bounds of the SVG",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 455,
              "column": 12
            },
            "end": {
              "line": 463,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataPoint"
            }
          ]
        },
        {
          "name": "_getCellPosX",
          "description": "Returns the x position where the cell should be placed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 466,
              "column": 12
            },
            "end": {
              "line": 468,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "xValue"
            }
          ]
        },
        {
          "name": "_getCellPosY",
          "description": "Returns the y position where the cell should be placed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 12
            },
            "end": {
              "line": 473,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "yValue"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/activitychart_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 49,
          "column": 8
        },
        "end": {
          "line": 474,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ActivitychartBasic",
      "attributes": [
        {
          "name": "primarycolor",
          "description": "Primary color of chart; formats supported are Hex, Short Hex, RGB (absolute), RGB (percentual), RGBA (absolute), RGBA (percentual), keyword (e.g. 'white'), HSL and HSLA",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 20
            },
            "end": {
              "line": 62,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "accentcolor",
          "description": "Accent color of chart; formats supported are Hex, Short Hex, RGB (absolute), RGB (percentual), RGBA (absolute), RGBA (percentual), keyword (e.g. 'white'), HSL and HSLA",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 20
            },
            "end": {
              "line": 68,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "cell-width",
          "description": "Width of cell",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 20
            },
            "end": {
              "line": 74,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "cell-height",
          "description": "Height of cell",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 20
            },
            "end": {
              "line": 80,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "cell-spacing",
          "description": "Space between cells (in px)",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 20
            },
            "end": {
              "line": 86,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "label-padding",
          "description": "Set padding (in px) of the label shown when hovering over a datum",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 20
            },
            "end": {
              "line": 92,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "label-text-size",
          "description": "Set text size (in px) of label shown when hovering over a datum",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 20
            },
            "end": {
              "line": 98,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "rotate-x-labels",
          "description": "Determine whether labels of X axis should be rotated",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 20
            },
            "end": {
              "line": 104,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "label-background-color",
          "description": "Customize the label background color",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 20
            },
            "end": {
              "line": 110,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "x-title",
          "description": "Title of the x axes",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 20
            },
            "end": {
              "line": 116,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "y-title",
          "description": "Title of the y axes",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 20
            },
            "end": {
              "line": 122,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "axis-title-text-size",
          "description": "Set text size (in px) of the axes' title labels",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 20
            },
            "end": {
              "line": 128,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "axis-labels-text-size",
          "description": "Set text size (in px) of the axes' labels",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 20
            },
            "end": {
              "line": 134,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "x-label-frequency",
          "description": "Decide with what column-frequency the lables on the x axis should be shown",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 20
            },
            "end": {
              "line": 140,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "y-label-frequency",
          "description": "Decide with what column-frequency the lables on the y axis should be shown",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 20
            },
            "end": {
              "line": 146,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "hide-y-axis",
          "description": "flag to disable y-Axis",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 20
            },
            "end": {
              "line": 152,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "x-label-formatter",
          "description": "Custom formatter function for x axes labels",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 20
            },
            "end": {
              "line": 157,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "y-label-formatter",
          "description": "Custom formatter function for y axes labels",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 20
            },
            "end": {
              "line": 162,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "cell-label-formatter",
          "description": "Custom formatter function for cell label",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 20
            },
            "end": {
              "line": 167,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "sort-x-values",
          "description": "Determines whether x values should be sorted before plotting (can be `asc` or `desc` depending on the sorting direction)",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 20
            },
            "end": {
              "line": 172,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "sort-y-values",
          "description": "Determines whether y values should be sorted before plotting (can be `asc` or `desc` depending on the sorting direction)",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 20
            },
            "end": {
              "line": 177,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "activitychart-basic"
    },
    {
      "description": "## `counter-basic`\n\nThis is a basic component for a counter displaying a single numeric value.\n\nFontAwesome is not shipped with M.E.I.N.E.L. and needs to be loaded separately.",
      "summary": "",
      "path": "src/visualizations/counter-basic.html",
      "properties": [
        {
          "name": "prefix",
          "type": "string | null | undefined",
          "description": "Optional text before the number.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 20
            },
            "end": {
              "line": 43,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "suffix",
          "type": "string | null | undefined",
          "description": "Optional text after the number.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 20
            },
            "end": {
              "line": 45,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "decimals",
          "type": "number | null | undefined",
          "description": "Number of decimals to show.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 20
            },
            "end": {
              "line": 50,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "defaultValue",
          "type": "string | null | undefined",
          "description": "The default value that is shown if data is `null`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 20
            },
            "end": {
              "line": 55,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"n/a\""
        },
        {
          "name": "valueFormatter",
          "type": "Object | null | undefined",
          "description": "Custom formatter function for displaying the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 20
            },
            "end": {
              "line": 60,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "animationDuration",
          "type": "number | null | undefined",
          "description": "Animation duration in seconds.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 20
            },
            "end": {
              "line": 65,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "hideSpinner",
          "type": "boolean | null | undefined",
          "description": "Determines whether the loading spinner should be hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 20
            },
            "end": {
              "line": 70,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_showSpinner",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 20
            },
            "end": {
              "line": 74,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_value",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 20
            },
            "end": {
              "line": 78,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_isNumericData",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 20
            },
            "end": {
              "line": 82,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_isTextData",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 20
            },
            "end": {
              "line": 86,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_computeShowSpinner",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 12
            },
            "end": {
              "line": 96,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hideSpinner"
            },
            {
              "name": "hasReceivedData"
            }
          ]
        },
        {
          "name": "_computeValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 12
            },
            "end": {
              "line": 104,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasReceivedData"
            },
            {
              "name": "data"
            },
            {
              "name": "defaultValue"
            },
            {
              "name": "formatter"
            }
          ]
        },
        {
          "name": "_computeIsNumericValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 12
            },
            "end": {
              "line": 108,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_computeIsTextValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 12
            },
            "end": {
              "line": 112,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/counter_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 34,
          "column": 8
        },
        "end": {
          "line": 113,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "CounterBasic",
      "attributes": [
        {
          "name": "prefix",
          "description": "Optional text before the number.",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 20
            },
            "end": {
              "line": 43,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "suffix",
          "description": "Optional text after the number.",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 20
            },
            "end": {
              "line": 45,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "decimals",
          "description": "Number of decimals to show.",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 20
            },
            "end": {
              "line": 50,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "default-value",
          "description": "The default value that is shown if data is `null`.",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 20
            },
            "end": {
              "line": 55,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-formatter",
          "description": "Custom formatter function for displaying the value",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 20
            },
            "end": {
              "line": 60,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "animation-duration",
          "description": "Animation duration in seconds.",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 20
            },
            "end": {
              "line": 65,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "hide-spinner",
          "description": "Determines whether the loading spinner should be hidden.",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 20
            },
            "end": {
              "line": 70,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "counter-basic"
    },
    {
      "description": "## `score-card`\n\nThis is a basic component for a score card displaying a single numeric value.\n\nFontAwesome is not shipped with M.E.I.N.E.L. and needs to be loaded separately.",
      "summary": "",
      "path": "src/visualizations/score-card.html",
      "properties": [
        {
          "name": "height",
          "type": "number | null | undefined",
          "description": "Height of the control",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 20
            },
            "end": {
              "line": 110,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "100"
        },
        {
          "name": "iconSize",
          "type": "number | null | undefined",
          "description": "Font size of the icon (px).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 20
            },
            "end": {
              "line": 115,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "50"
        },
        {
          "name": "primarycolor",
          "type": "string | null | undefined",
          "description": "Primary color of the control.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 20
            },
            "end": {
              "line": 117,
              "column": 40
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "iconClasses",
          "type": "string | null | undefined",
          "description": "Classes of the icon that should be displayed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 20
            },
            "end": {
              "line": 119,
              "column": 39
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Name of the metric that is displayed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 20
            },
            "end": {
              "line": 121,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "prefix",
          "type": "string | null | undefined",
          "description": "Optional text before the number.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 20
            },
            "end": {
              "line": 123,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "suffix",
          "type": "string | null | undefined",
          "description": "Optional text after the number.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 20
            },
            "end": {
              "line": 125,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "decimals",
          "type": "number | null | undefined",
          "description": "Number of decimals to show.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 20
            },
            "end": {
              "line": 130,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "defaultValue",
          "type": "string | null | undefined",
          "description": "The default value that is shown if data is `null`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 20
            },
            "end": {
              "line": 135,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"n/a\""
        },
        {
          "name": "animationDuration",
          "type": "number | null | undefined",
          "description": "Animation duration in seconds.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 20
            },
            "end": {
              "line": 140,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "hideSpinner",
          "type": "boolean | null | undefined",
          "description": "Determines whether the loading spinner should be hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 20
            },
            "end": {
              "line": 145,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "link",
          "type": "string | null | undefined",
          "description": "A link to a page showing related information (optional).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 20
            },
            "end": {
              "line": 147,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "linkText",
          "type": "string | null | undefined",
          "description": "The text of the link (optional).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 20
            },
            "end": {
              "line": 149,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "valueFormatter",
          "type": "Object | null | undefined",
          "description": "Custom formatter function for displaying the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 20
            },
            "end": {
              "line": 151,
              "column": 42
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/score_card_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 98,
          "column": 8
        },
        "end": {
          "line": 158,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ScoreCard",
      "attributes": [
        {
          "name": "height",
          "description": "Height of the control",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 20
            },
            "end": {
              "line": 110,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "icon-size",
          "description": "Font size of the icon (px).",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 20
            },
            "end": {
              "line": 115,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "primarycolor",
          "description": "Primary color of the control.",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 20
            },
            "end": {
              "line": 117,
              "column": 40
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "icon-classes",
          "description": "Classes of the icon that should be displayed.",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 20
            },
            "end": {
              "line": 119,
              "column": 39
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "name",
          "description": "Name of the metric that is displayed.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 20
            },
            "end": {
              "line": 121,
              "column": 32
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "prefix",
          "description": "Optional text before the number.",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 20
            },
            "end": {
              "line": 123,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "suffix",
          "description": "Optional text after the number.",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 20
            },
            "end": {
              "line": 125,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "decimals",
          "description": "Number of decimals to show.",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 20
            },
            "end": {
              "line": 130,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "default-value",
          "description": "The default value that is shown if data is `null`.",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 20
            },
            "end": {
              "line": 135,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "animation-duration",
          "description": "Animation duration in seconds.",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 20
            },
            "end": {
              "line": 140,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "hide-spinner",
          "description": "Determines whether the loading spinner should be hidden.",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 20
            },
            "end": {
              "line": 145,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "link",
          "description": "A link to a page showing related information (optional).",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 20
            },
            "end": {
              "line": 147,
              "column": 32
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "link-text",
          "description": "The text of the link (optional).",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 20
            },
            "end": {
              "line": 149,
              "column": 36
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-formatter",
          "description": "Custom formatter function for displaying the value",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 20
            },
            "end": {
              "line": 151,
              "column": 42
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "score-card"
    },
    {
      "description": "## `loading-spinner`\n\nThis component is used as wrapper of actual visualization components for displaying a spinner while loading data using the `ajax-wrapper`.\n\nFontAwesome is not shipped with M.E.I.N.E.L. and needs to be loaded separately.",
      "summary": "",
      "path": "src/visualizations/loading-spinner.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/loading_spinner_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 48,
          "column": 8
        },
        "end": {
          "line": 61,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "LoadingSpinner",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "loading-spinner"
    },
    {
      "description": "## `worldmap-basic`\n\nThis is a basic component for plotly worldmaps.\n\nFor further information and deeper understanding visit the [Plotly maps chart documentations](https://plot.ly/javascript/#maps).",
      "summary": "",
      "path": "src/visualizations/worldmap-basic.html",
      "properties": [
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "The type of map.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 20
            },
            "end": {
              "line": 44,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"choropleth\""
        },
        {
          "name": "primarycolor",
          "type": "string | null | undefined",
          "description": "Primary color of the control.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 20
            },
            "end": {
              "line": 49,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgb(237, 237, 237)\""
        },
        {
          "name": "accentcolor",
          "type": "string | null | undefined",
          "description": "Primary color of the control.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 20
            },
            "end": {
              "line": 54,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(164,14,24,1)\""
        }
      ],
      "methods": [
        {
          "name": "getDiagram",
          "description": "Gets the container element of the diagram that should be rendered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 12
            },
            "end": {
              "line": 65,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getPlotData",
          "description": "Gets the data of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 12
            },
            "end": {
              "line": 91,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "getLayout",
          "description": "Gets the layout options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 12
            },
            "end": {
              "line": 107,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/worldmap_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 32,
          "column": 8
        },
        "end": {
          "line": 108,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "WorldmapBasic",
      "attributes": [
        {
          "name": "type",
          "description": "The type of map.",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 20
            },
            "end": {
              "line": 44,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "primarycolor",
          "description": "Primary color of the control.",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 20
            },
            "end": {
              "line": 49,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "accentcolor",
          "description": "Primary color of the control.",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 20
            },
            "end": {
              "line": 54,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "worldmap-basic"
    },
    {
      "description": "## `vennchart-basic`\n\nThis is a basic component for venn.js charts.\n\nFor further information and deeper understanding visit the [venn.js documentation](https://github.com/benfred/venn.js).",
      "summary": "",
      "path": "src/visualizations/vennchart-basic.html",
      "properties": [
        {
          "name": "width",
          "type": "number | null | undefined",
          "description": "Width of the outer div",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 20
            },
            "end": {
              "line": 74,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "400"
        },
        {
          "name": "height",
          "type": "number | null | undefined",
          "description": "Height of the outer div",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 20
            },
            "end": {
              "line": 79,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "300"
        },
        {
          "name": "padding",
          "type": "number | null | undefined",
          "description": "Padding of the inner chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 20
            },
            "end": {
              "line": 84,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "10"
        },
        {
          "name": "labelFormatter",
          "type": "Object | null | undefined",
          "description": "Custom formatter function for displaying the labels",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 20
            },
            "end": {
              "line": 89,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "valueFormatter",
          "type": "Object | null | undefined",
          "description": "Custom formatter function for displaying the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 20
            },
            "end": {
              "line": 94,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "blacklist",
          "type": "Array | null | undefined",
          "description": "Excluded sets, which are not visualized",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 20
            },
            "end": {
              "line": 100,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "hideIntersectionLabels",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 20
            },
            "end": {
              "line": 101,
              "column": 51
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "dataChanged",
          "description": "Displays the data in a pie chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 12
            },
            "end": {
              "line": 189,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/vennchart_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 62,
          "column": 8
        },
        "end": {
          "line": 190,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "VennchartBasic",
      "attributes": [
        {
          "name": "width",
          "description": "Width of the outer div",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 20
            },
            "end": {
              "line": 74,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "height",
          "description": "Height of the outer div",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 20
            },
            "end": {
              "line": 79,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "padding",
          "description": "Padding of the inner chart",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 20
            },
            "end": {
              "line": 84,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "label-formatter",
          "description": "Custom formatter function for displaying the labels",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 20
            },
            "end": {
              "line": 89,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "value-formatter",
          "description": "Custom formatter function for displaying the value",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 20
            },
            "end": {
              "line": 94,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "blacklist",
          "description": "Excluded sets, which are not visualized",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 20
            },
            "end": {
              "line": 100,
              "column": 21
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "hide-intersection-labels",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 20
            },
            "end": {
              "line": 101,
              "column": 51
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "vennchart-basic"
    },
    {
      "description": "## `boxplot-basic`\n\nThis is a basic component for plotly box plots.\n\nFor further information and deeper understanding visit the [Plotly box plot documentation](https://plot.ly/javascript/box-plots/).",
      "summary": "",
      "path": "src/visualizations/boxplot-basic.html",
      "properties": [
        {
          "name": "primarycolor",
          "type": "string | null | undefined",
          "description": "Primary color of chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(0,0,0,1)\""
        },
        {
          "name": "accentcolor",
          "type": "string | null | undefined",
          "description": "Accent color of chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"rgba(0,0,0,1)\""
        },
        {
          "name": "mean",
          "type": "boolean | null | undefined",
          "description": "Show arithmetic mean",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "xTitle",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 20
            },
            "end": {
              "line": 53,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "yTitle",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 54,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "getDiagram",
          "description": "Gets the container element of the diagram that should be rendered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 12
            },
            "end": {
              "line": 65,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getPlotData",
          "description": "Gets the data of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 12
            },
            "end": {
              "line": 83,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "getLayout",
          "description": "Gets the layout options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 12
            },
            "end": {
              "line": 111,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/boxplot_basic_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 8
        },
        "end": {
          "line": 112,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "BoxplotBasic",
      "attributes": [
        {
          "name": "primarycolor",
          "description": "Primary color of chart",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "accentcolor",
          "description": "Accent color of chart",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 20
            },
            "end": {
              "line": 46,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "mean",
          "description": "Show arithmetic mean",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 20
            },
            "end": {
              "line": 52,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "x-title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 20
            },
            "end": {
              "line": 53,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "y-title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 20
            },
            "end": {
              "line": 54,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "boxplot-basic"
    },
    {
      "description": "## `fallback-text`\n\nThis component is used as wrapper of actual visualization components for displaying a fallback text if received data is empty.",
      "summary": "",
      "path": "src/visualizations/fallback-text.html",
      "properties": [
        {
          "name": "emptyDataText",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 20
            },
            "end": {
              "line": 38,
              "column": 41
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_hasEmptyData",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 20
            },
            "end": {
              "line": 42,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_computeHasEmptyData",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 12
            },
            "end": {
              "line": 62,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasReceivedData"
            },
            {
              "name": "data"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/fallback_text_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 30,
          "column": 8
        },
        "end": {
          "line": 63,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FallbackText",
      "attributes": [
        {
          "name": "empty-data-text",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 20
            },
            "end": {
              "line": 38,
              "column": 41
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "fallback-text"
    },
    {
      "description": "## `badges-list`\n\nThis is a component for a list of counter badges.",
      "summary": "",
      "path": "src/visualizations/badges-list.html",
      "properties": [
        {
          "name": "data",
          "type": "Object | null | undefined",
          "description": "Data that should be processed/visualized.",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 18,
              "column": 20
            },
            "end": {
              "line": 18,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "acceptData",
          "type": "boolean | null | undefined",
          "description": "Determines whether the component accepts data from other data-control components.",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 20,
              "column": 20
            },
            "end": {
              "line": 23,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "hasReceivedData",
          "type": "boolean | null | undefined",
          "description": "Determines whether data das been received so far.",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 25,
              "column": 20
            },
            "end": {
              "line": 28,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "_receivingData",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 29,
              "column": 20
            },
            "end": {
              "line": 32,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "isAttached",
          "type": "boolean | null | undefined",
          "description": "Determines whether the component is currently attached",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 34,
              "column": 20
            },
            "end": {
              "line": 37,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "hideSpinner",
          "type": "boolean | null | undefined",
          "description": "Determines whether the loading spinner should be hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 20
            },
            "end": {
              "line": 75,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_showSpinner",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 20
            },
            "end": {
              "line": 79,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "This is called by Polymer after the component instance is attached to the document.",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 48,
              "column": 12
            },
            "end": {
              "line": 52,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "This is called by Polymer after the component instance is detached from the document.",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 55,
              "column": 12
            },
            "end": {
              "line": 58,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "receiveData",
          "description": "Receives data from other data-control components.",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 64,
              "column": 12
            },
            "end": {
              "line": 70,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The data that should be received."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "update",
          "description": "Forces the component to reprocess data as if it were new.\nShould be called if any property needed for processing has changed.",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 76,
              "column": 12
            },
            "end": {
              "line": 83,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "_dataChanged",
          "description": "Observer that is executed when the data property has changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 86,
              "column": 12
            },
            "end": {
              "line": 98,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "dataChanged",
          "description": "Callback that is executed when new data has been received.\nNeeds to be implemented by concrete component.",
          "privacy": "public",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 105,
              "column": 12
            },
            "end": {
              "line": 106,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The received data."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "_computeShowSpinner",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 12
            },
            "end": {
              "line": 89,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hideSpinner"
            },
            {
              "name": "hasReceivedData"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/visualizations/badges_list_demo.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 63,
          "column": 8
        },
        "end": {
          "line": 90,
          "column": 9
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "BadgesList",
      "attributes": [
        {
          "name": "data",
          "description": "Data that should be processed/visualized.",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 18,
              "column": 20
            },
            "end": {
              "line": 18,
              "column": 32
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "accept-data",
          "description": "Determines whether the component accepts data from other data-control components.",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 20,
              "column": 20
            },
            "end": {
              "line": 23,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "has-received-data",
          "description": "Determines whether data das been received so far.",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 25,
              "column": 20
            },
            "end": {
              "line": 28,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "is-attached",
          "description": "Determines whether the component is currently attached",
          "sourceRange": {
            "file": "../mixins/data-receiver-mixin.html",
            "start": {
              "line": 34,
              "column": 20
            },
            "end": {
              "line": 37,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "DataReceiverMixin"
        },
        {
          "name": "hide-spinner",
          "description": "Determines whether the loading spinner should be hidden.",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 20
            },
            "end": {
              "line": 75,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "badges-list",
      "mixins": [
        "DataReceiverMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "Mixin that passes data down to all descendant Polymer components\nwith `DataReceiverMixin`.\n\nShould be used by components that create or process data before visualization.",
      "summary": "",
      "path": "src/mixins/data-control-mixin.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "Fires ready event when the component has been attached to the DOM.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 12
            },
            "end": {
              "line": 20,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "passData",
          "description": "Passes data to accepting descendants.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 12
            },
            "end": {
              "line": 32,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The data that should be passed."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_passDataTo",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 12
            },
            "end": {
              "line": 50,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "DataControlMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "Mixin for components that act as a data source. Published data is\npassed down to descendant Polymer components with `DataReceiverMixin`.",
      "summary": "",
      "path": "src/mixins/data-source-mixin.html",
      "properties": [
        {
          "name": "isDataSource",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 20
            },
            "end": {
              "line": 18,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        }
      ],
      "methods": [
        {
          "name": "publishData",
          "description": "Publishes data created by the component.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 12
            },
            "end": {
              "line": 28,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The data that was created."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 4
        },
        "end": {
          "line": 30,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "DataSourceMixin",
      "attributes": [
        {
          "name": "is-data-source",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 20
            },
            "end": {
              "line": 18,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "Mixin that accepts data passed by ancestor Polymer components or\nspecified manually via attribute.\n\nThis mixin needs to be added to all visualization components.",
      "summary": "",
      "path": "src/mixins/data-receiver-mixin.html",
      "properties": [
        {
          "name": "data",
          "type": "Object | null | undefined",
          "description": "Data that should be processed/visualized.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 20
            },
            "end": {
              "line": 18,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "acceptData",
          "type": "boolean | null | undefined",
          "description": "Determines whether the component accepts data from other data-control components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 20
            },
            "end": {
              "line": 23,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "hasReceivedData",
          "type": "boolean | null | undefined",
          "description": "Determines whether data das been received so far.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 20
            },
            "end": {
              "line": 28,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_receivingData",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 20
            },
            "end": {
              "line": 32,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "isAttached",
          "type": "boolean | null | undefined",
          "description": "Determines whether the component is currently attached",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 20
            },
            "end": {
              "line": 37,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "This is called by Polymer after the component instance is attached to the document.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 12
            },
            "end": {
              "line": 52,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "This is called by Polymer after the component instance is detached from the document.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 12
            },
            "end": {
              "line": 58,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "receiveData",
          "description": "Receives data from other data-control components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 12
            },
            "end": {
              "line": 70,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The data that should be received."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "update",
          "description": "Forces the component to reprocess data as if it were new.\nShould be called if any property needed for processing has changed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 12
            },
            "end": {
              "line": 83,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataChanged",
          "description": "Observer that is executed when the data property has changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 12
            },
            "end": {
              "line": 98,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "dataChanged",
          "description": "Callback that is executed when new data has been received.\nNeeds to be implemented by concrete component.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 12
            },
            "end": {
              "line": 106,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The received data."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 4
        },
        "end": {
          "line": 108,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "DataReceiverMixin",
      "attributes": [
        {
          "name": "data",
          "description": "Data that should be processed/visualized.",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 20
            },
            "end": {
              "line": 18,
              "column": 32
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "accept-data",
          "description": "Determines whether the component accepts data from other data-control components.",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 20
            },
            "end": {
              "line": 23,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "has-received-data",
          "description": "Determines whether data das been received so far.",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 20
            },
            "end": {
              "line": 28,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-attached",
          "description": "Determines whether the component is currently attached",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 20
            },
            "end": {
              "line": 37,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "Mixin that transforms data it receives and passes the result down to\ndescendant Polymer components  with `DataReceiverMixin`.",
      "summary": "",
      "path": "src/mixins/data-transformer-mixin.html",
      "properties": [],
      "methods": [
        {
          "name": "dataChanged",
          "description": "Callback that is executed when new data has been received.\nWill execute the transformation and pass results to descendants.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 12
            },
            "end": {
              "line": 28,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The received data."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "transformData",
          "description": "Applies the transformation. Needs to be implemented by the concrete component.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 12
            },
            "end": {
              "line": 37,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "The source data."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The transformed data."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 4
        },
        "end": {
          "line": 39,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "DataTransformerMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "Mixin that acts as base class for plotly-based chart components.",
      "summary": "",
      "path": "src/mixins/plotly-mixin.html",
      "properties": [
        {
          "name": "width",
          "type": "number | null | undefined",
          "description": "Width of the outer div",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 20
            },
            "end": {
              "line": 17,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "height",
          "type": "number | null | undefined",
          "description": "Height of the out div",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 20
            },
            "end": {
              "line": 22,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"update\"",
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 12
            },
            "end": {
              "line": 36,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "dataChanged",
          "description": "Plots the diagram",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 12
            },
            "end": {
              "line": 74,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getDiagram",
          "description": "Gets the container element of the diagram that should be rendered",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 12
            },
            "end": {
              "line": 78,
              "column": 13
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getPlotData",
          "description": "Gets the data of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 12
            },
            "end": {
              "line": 83,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "getLayout",
          "description": "Gets the layout options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 12
            },
            "end": {
              "line": 88,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getConfig",
          "description": "Gets the config options of the plot",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 12
            },
            "end": {
              "line": 93,
              "column": 13
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 9,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "PlotlyMixin",
      "attributes": [
        {
          "name": "width",
          "description": "Width of the outer div",
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 20
            },
            "end": {
              "line": 17,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "height",
          "description": "Height of the out div",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 20
            },
            "end": {
              "line": 22,
              "column": 21
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
